openapi: 3.0.3
info:
  title: SQL-OPTIMIZER
  description: Service for SQL-compatible databases optimisations using requests history.
  version: 1.1.0
components:
  schemas:
    FORMATS:
      type: string
      enum:
        - CSV
        - JSON
    CONSUMERS:
      type: string
      enum:
        - EMAIL
        - SMB
        - SFTP
        - FS
    INSTANCES:
      type: string
      enum:
        - POSTGRESQL
        - SQLSERVER
    CommonMessage:
      type: object
      properties:
        details:
          type: string
          required: true
    BenchTask:
      type: object
      properties:
        connectionUrl:
          type: string
          required: true
        queries:
          type: array
          items:
            type: string
          required: true
        consumer:
          type: string
          required: false
          default: FS
        format:
          type: string
          required: false
          default: CSV
        consumerParams:
          type: string
          required: false
          default: ''
        saveBetter:
          type: boolean
          required: false
          default: false
paths:
  /bench:
    summary: Test and autoindex database
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'components/schemas/BenchTask'
      responses:
        200:
          description: Info about test request
          content:
            application/json:
              schema:
                $ref: 'components/schemas/CommonMessage'
        400:
          description: This database not supported yet
        404:
          description: Provided connectionUrl doesn't not match pattern
        504:
          description: Can't ping database. Please check it's availability and creds or try again later.
        500:
          description: Error while creating database server specific index for query.
        5XX:
          description: Something goes wrong
  /support/formats:
    get:
      summary: Get supported Report formats
      responses:
        200:
          description: Enum with supported formats
          content:
            application/json:
              schema:
                $ref: '#components/schemas/formats'
  /support/consumers:
    get:
      summary: Determines available places where the results should be stored
      responses:
        200:
          description: Enum with supported methods for saving reports
          content:
            application/json:
              schema:
                $ref: '#components/schemas/consumers'
  /support/instances:
    get:
      summary: Supported DBMS
      responses:
        200:
          description: Enum with DBMS which the program can build indexes
          content:
            application/json:
              schema:
                $ref: '#components/schemas/instances'
